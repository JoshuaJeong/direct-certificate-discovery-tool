<?xml version="1.0" encoding="UTF-8"?>
<project name="project"
    xmlns:cobertura="antlib:net.sourceforge.cobertura.ant"
    xmlns:dcdt="antlib:gov.hhs.onc.dcdt.ant"
    xmlns:dcdt-cobertura="antlib:gov.hhs.onc.dcdt.ant.cobertura"
    xmlns:dcdt-hg="antlib:gov.hhs.onc.dcdt.ant.hg"
    xmlns:dcdt-project="antlib:gov.hhs.onc.dcdt.ant.project">
    
    <description>Ant project for Direct Certificate Discovery Tool (DCDT) projects.</description>
    
    <import file="${project.basedir}/../dcdt-core/src/main/scripts/ant-core.xml" as="" prefixSeparator=""/>
    
    <taskdef resource="net/sourceforge/cobertura/ant/antlib.xml" classpath="${maven.classpath}" uri="antlib:net.sourceforge.cobertura.ant"/>
    <taskdef file="${project.basedir}/../dcdt-core/src/main/scripts/antlib-core-cobertura.xml" uri="antlib:gov.hhs.onc.dcdt.ant.cobertura"/>
    <taskdef file="${project.basedir}/../dcdt-core/src/main/scripts/antlib-core-hg.xml" uri="antlib:gov.hhs.onc.dcdt.ant.hg"/>
    <taskdef file="${project.basedir}/../dcdt-core/src/main/scripts/antlib-project.xml" uri="antlib:gov.hhs.onc.dcdt.ant.project"/>
    
    <target name="project-coverage-check" description="Performs checks against Maven project test coverage results." depends="core,project-coverage-init">
        <dcdt-cobertura:check coverageFile="${project.build.coverageFile}" haltOnFailure="${project.coverage.check.haltOnFailure}"
            branchRate="${project.coverage.check.branchRate}" lineRate="${project.coverage.check.lineRate}"
            packageBranchRate="${project.coverage.check.branchRate}" packageLineRate="${project.coverage.check.lineRate}"
            totalBranchRate="${project.coverage.check.branchRate}" totalLineRate="${project.coverage.check.lineRate}"/>
    </target>
    
    <target name="project-coverage-report" description="Generates a Maven project test coverage report." depends="core,project-coverage-init">
        <dcdt-cobertura:report coverageFile="${project.build.coverageFile}" srcDir="${project.build.sourceDirectory}"
            outDir="${project.reporting.coverageOutputDirectory}"/>
    </target>
    
    <target name="project-coverage-instrument" description="Generates Maven project test coverage instrumentation.">
        <dcdt-cobertura:instrument coverageFile="${project.build.coverageFile}" outDir="${project.build.instrumentedOutputDirectory}">
            <auxClasspath path="${maven.classpath}"/>
            <fileset dir="${project.build.outputDirectory}" erroronmissingdir="false">
                <include name="**/*.class"/>
            </fileset>
        </dcdt-cobertura:instrument>
    </target>
    
    <target name="project-coverage-init" description="Initializes Maven project test coverage variable(s).">
        <!-- Project build test coverage directory variable(s) -->
        <var name="project.build.instrumentedOutputDirectory" value="${project.build.directory}/generated-classes/cobertura"/>
        
        <!-- Project reporting test coverage directory variable(s) -->
        <var name="project.reporting.coverageOutputDirectory" value="${project.reporting.outputDirectory}/cobertura"/>
        
        <!-- Project build test coverage file variable(s) -->
        <var name="project.build.coverageFile" value="${project.build.directory}/cobertura/cobertura.ser"/>
    </target>
    
    <target name="project-coverage" description="Prepares Maven project test coverage file(s)."
        depends="core,project-coverage-init,project-coverage-instrument"/>
    
    <target name="project-process-props" description="Processes Maven project properties.">
        <dcdt:dirname path="${project.build.pomPropertiesFile}" property="project.build.pomPropertiesDir"/>
        <mkdir dir="${project.build.pomPropertiesDir}"/>
        
        <trycatch>
            <try>
                <copy file="${project.build.sourcePomPropertiesFile}" tofile="${project.build.pomPropertiesFile}">
                    <filterchain>
                        <expandproperties/>
                    </filterchain>
                </copy>
            </try>
            <catch/>
        </trycatch>
        
        <dcdt-project:build-version prefix="project.module.${project.artifactId}."/>
        <dcdt-project:hg-version path="${project.basedir}" prefix="project.module.${project.artifactId}."/>
        
        <propertyselector property="project.pom.props.build" override="true"
            match="^project\.module\.\Q${project.artifactId}\E\.build\.timestamp$"/>
        <propertyselector property="project.pom.props.hg" override="true"
            match="^project\.module\.\Q${project.artifactId}\E\.hg\.(?:author(?:\.(?:email|person))?|branch|date|node(?:\.short)?|rev|tag)$"/>
        <dcdt:write-properties file="${project.build.pomPropertiesFile}" append="true">
            ${project.pom.props.build},
            ${project.pom.props.hg}
        </dcdt:write-properties>
        
        <dcdt:info>Processed Maven project properties file: ${project.build.pomPropertiesFile}</dcdt:info>
    </target>
    
    <target name="project-init" description="Initializes project variable(s).">
        <!-- Project build file variable(s) -->
        <var name="project.build.pomPropertiesFile" value="${project.build.directory}/maven/pom.properties"/>
        <var name="project.build.sourcePomPropertiesFile" value="${project.basedir}/pom.properties"/>
    </target>
    
    <target name="project" description="Prepares Maven project file(s)." depends="core,project-init,project-process-props"/>
</project>
